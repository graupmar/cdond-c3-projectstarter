version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Will delete env: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            #maybe I need it....:aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            #SUCCESS=$(curl -H "token: 8aba2f9d-c4f8-41a8-9841-8c860d11c575" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            export SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test the frontend
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test the backend
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: audit check frontend
          command: |
            cd frontend
            npm install
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: 'pipeline'
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: audit check backend
          command: |
            cd backend
            npm install
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: 'pipeline'
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar #need this for workspace
      - run: yum install -y gzip #need this for workspace
      - run: ls -la ~/project/.circleci/ansible/
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      #- image: python:3.7-alpine3.11
      - image: cytopia/ansible:latest
    resource_class: small

    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["c0:49:11:47:c3:00:b4:66:86:7c:f0:d6:1a:8c:69:99"]
      - run:
          name: Install dependencies
          command: |
            apk add --update rsync
            apk add --update openssh
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server now
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            env
            echo ENVIRONMENT=$ENVIRONMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env
            cd backend
            npm i
            npm run build
            #we will frst revert to have a susccess in output. later we need to remove this
            npm run migrations:revert >> migration_feedback_revert
            npm run migrations >> migration_feedback
            cat migration_feedback
            echo "ID: "${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Send migration results to memstash
          command: |
            migration="0"
            if grep -q "successfully" ~/project/backend/migration_feedback;
            then
              migration="1"
            fi
            curl -H "Content-Type: text/plain" -H "token: 5538c3a0-1ea2-4a68-a2c6-f0f27d9975a1" \
              --request PUT --data $migration https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
            #from: https://github.com/nodesource/distributions
            #curl -sL https://deb.nodesource.com/setup_lts.x | bash -
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            #export BACKEND_IP=`sed -n 2p ~/project/.circleci/ansible/inventory.txt`
            export BACKEND_IP="18.192.37.248"
            echo "BACKEND_IP: "${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "${API_URL}" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            #will delete later
            aws s3 cp ~/project/frontend/dist s3://udapeople-eeed7f8 --recursive
            #use this later
            #aws s3 cp ~/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: cytopia/ansible:latest
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["c0:49:11:47:c3:00:b4:66:86:7c:f0:d6:1a:8c:69:99"]
      - run:
          name: Install dependencies
          command: |
            apk add --update rsync
            apk add --update openssh
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update curl
            apk add --update nodejs
            apk add --update npm
            pip install awscli
      - run:
          name: Build backend
          command: |
            echo "------check inventory file----------"
            cat ~/project/.circleci/ansible/inventory.txt
            echo "------check env----------"
            env
            echo ENVIRONMENT=$ENVIRONMENT > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            echo "-------cat env---------"
            cat .env
            echo "------npm install-------"
            npm install
            npm run build
            tar -czvf backend-dist.tgz ~/project/backend/dist/*
      - run:
          name: Deploy backend
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            echo "18.192.37.248" >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip curl
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            #export BACKEND_IP=`sed -n 2p ~/project/.circleci/ansible/inventory.txt`
            export BACKEND_IP="18.192.37.248"
            URL="http://${BACKEND_IP}:3030/api/status"
            if curl -s {$URL} | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            #WILL USE LATERURL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.eu-central-1.amazonaws.com/index.html"
            URL="https://udapeople-eeed7f8.s3.eu-central-1.amazonaws.com/index.html"
            echo "$URL"
            if curl -s {$URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      #- destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            #aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
            #  --stack-name udapeople-cloudfront --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            export WorkflowID="eeed7f8"
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront --parameter-overrides WorkflowID="${WorkflowID}"
      # Here's where you will add some code to rollback on failure


workflows:
  my_workflow:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - scan-backend:
#          requires: [build-backend]
####      - deploy-infrastructure delete later
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [ master ]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#####      - run-migrations - delete later
#      - run-migrations:
#          requires: [configure-infrastructure]
######      - deploy-frontend
#      - deploy-frontend:
#          requires: [run-migrations]
#####      - deploy-backend
#      - deploy-backend:
#          requires: [run-migrations]
      - smoke-test
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update
#      - cloudfront-update:
#          requires: [smoke-test]